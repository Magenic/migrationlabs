swagger: "2.0"
info:
  description: "Demo of Swagger 1st NodeJS API"
  version: "1.0.2"
  title: "NodeJS People API"
  termsOfService: ""
  contact:
    email: "stuart.t.williams@outlook.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
basePath: "/v1"
tags:
- name: "People Node JS Demo"
  description: "A demo of a swagger 1st way to deliver nodejs APIs"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BlitzkriegSoftware/NodeSwaggerDemoPeople"
- name: "Person"
  description: "People Demo"
schemes:
- "http"
paths:
  /people:
    get:
      tags:
      - "PeopleList"
      summary: "Get a list of people"
      description: "Gets a list of people"
      operationId: "PeopleList_peopleGet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
            200:
              description: "successful operation"
              schema:
                $ref: "#/definitions/people"
  /people/{peopleId}:
    get:
      tags:
      - "PersonGetById"
      summary: "Get person by ID"
      description: "Returns a single person"
      operationId: "PeopleId_getPersonById"
      produces:
      - "application/json"
      parameters:
      - name: "peopleId"
        in: "path"
        description: "ID of person to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/person"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Person not found"
definitions:
  people:
    description: List of people
    type: array
    items:
      $ref: "#/definitions/person"
  person:
    type: object
    required:
    - _id
    properties:
      _id:
        description: PK of a Person (unique)
        type: string
      NameLast:
        description: Last Name
        type: string
      NameFirst:
        description: First Name
        type: string
      EMail:
        description: e-mail        
        type: string
      Company:
        description: Company (optional)
        type: string
      MemberSince:
        description: Member Since      
        type: string
        format: date-time
      Birthday:
        description: Date of Birthday
        type: string
        format: date-time
      Addresses:
        description: List of Addresses      
        type: array
        items:
          "$ref": "#/definitions/address"
      Preference:
        description: hashtable/dictionary of settings
        type: array
        items:
          "$ref": "#/definitions/setting"
  address:
    type: object
    properties:
      Address1:
        description: primary street address
        type: string
      Address2:
        description: appartment number, floor number, etc.
        type: string
      City:
        description: City
        type: string
      State:
        description: State or Provence
        type: string
      Zip:
        description: Zip/Postal Code      
        type: string
      Kind:
        description: Kind of address-> business, shipping, billing, etc.
        type: string
  setting:
    description: Setting
    additionalProperties:
      type: string